1、建立工作区
mkdir <dicname>
git init

2、查看仓库状态
git status

3、将工作区的修改加入到暂存区
git add <file>

4、比对修改前后的差异
git diff

5、将暂存区的修改提交到本地仓库
git commit -m "comment"

6、查看提交历史，以便回退到历史的某个版本
git log

7、回退到某个版本
git reset --hard commit_id(SHA1编号)

8、查看命令历史，以便回到未来的某个版本
git reflog

9、当需要放弃工作区的修改时
git checkout -- <file>

10、当需要放弃暂存区的修改时
git reset HEAD <file>
git checkout -- <file>

11、搭建远程仓库
打开Shell（Windows下打开Git Bash），创建SSH Key $ ssh-keygen -t 4096 rsa -C "youremail@example.com"
登陆GitHub，打开“Account settings”
点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
使用cat id_rsa.pub显示文件内容

12、登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库

13、将本地的项目上传至远程仓库
git remote add origin <repo url>
git push -u origin master

14、克隆远程库上的项目
git clone <repo url>

15、查看分支
git branch

16、创建分支
git branch <name>

17、切换分支
git checkout <name>

18、创建+切换分支
git checkout -b <name>

19、合并某分支到当前分支
git merge <name>

20、删除分支
git branch -d <name>

21、查看分支合并图
git log --graph

22、禁用Fast forward，使用--no-ff参数
git merge --no-ff -m "merge with no-ff"

23、查看分支历史
git log --graph --pretty=oneline --abbrev-commit

24、在开发新功能的时候遇到产线bug需要修复时的步骤
1）、将进度进行临时存储
git stash
2）、切换到master分支
git checkout master
3）、创建并切换到新的分支
git branch -b issue-100
4）、提交修改
git add <file>
git commit -m "fix bug 100"
5）、切换到master分支
git checkout master
6）、合并issue-100分支的代码到master
git merge --no-ff -m "merge bug fix 100" issue-100
7）、切换到dev分支
git branch dev
8）、将临时存储的代码回复到工作区
git stash pop

25、多人协同开发流程
1）、查看远程库信息
git remote -v
2）、将本地代码推送到远程服务器（若本地的分支不推送到远程，其他人不可见）
git push origin branch-name
3）、拉去最新代码
git pull
4）、在本地建立与远程对应的分支
git checkout -b branch-name origin/branch-name
5）、将本地分支与远程分支进行关联
git branch --set-upstream branch-name origin/branch-name

26、标签管理
1）、创建tag（tag标签是版本库的快照）
git tag tag-name
2）、删除标签
git tag -d tag-name
git push origin :refs/tags/<tag-name>（删除远程标签）
3）、推送标签
git push origin tag-name（推送单个）
git push origin --tags（推送全部）